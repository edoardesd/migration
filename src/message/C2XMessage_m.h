//
// Generated file, do not edit! Created by nedtool 5.7 from message/C2XMessage.msg.
//

#ifndef __C2XMESSAGE_M_H
#define __C2XMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "veins/modules/messages/BaseFrame1609_4_m.h"
	#include "veins/base/utils/SimpleAddress.h"
	#include "veins/base/modules/BaseMacLayer.h"
// }}

/**
 * Class generated from <tt>message/C2XMessage.msg:22</tt> by nedtool.
 * <pre>
 * packet C2XMessage extends BaseFrame1609_4
 * {
 *     unsigned long id;
 *     unsigned int sender;
 *     int expectedPackets;
 *     long migrationSize;
 *     bool clusterHead;
 *     simtime_t sendTime;
 * }
 * </pre>
 */
class C2XMessage : public ::veins::BaseFrame1609_4
{
  protected:
    unsigned long id;
    unsigned int sender;
    int expectedPackets;
    long migrationSize;
    bool clusterHead;
    ::omnetpp::simtime_t sendTime;

  private:
    void copy(const C2XMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const C2XMessage&);

  public:
    C2XMessage(const char *name=nullptr, short kind=0);
    C2XMessage(const C2XMessage& other);
    virtual ~C2XMessage();
    C2XMessage& operator=(const C2XMessage& other);
    virtual C2XMessage *dup() const override {return new C2XMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned long getId() const;
    virtual void setId(unsigned long id);
    virtual unsigned int getSender() const;
    virtual void setSender(unsigned int sender);
    virtual int getExpectedPackets() const;
    virtual void setExpectedPackets(int expectedPackets);
    virtual long getMigrationSize() const;
    virtual void setMigrationSize(long migrationSize);
    virtual bool getClusterHead() const;
    virtual void setClusterHead(bool clusterHead);
    virtual ::omnetpp::simtime_t getSendTime() const;
    virtual void setSendTime(::omnetpp::simtime_t sendTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const C2XMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, C2XMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __C2XMESSAGE_M_H

